The useReducer Hook is similar to the useState Hook.
It allows for custom state logic.
If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.



useReducer is a hook in React used for managing state in functional components. 
It offers a more controlled way of managing state compared to the useState hook,
especially when the state logic is complex and involves multiple actions that can update the state.

Here's a breakdown of how useReducer works:

1 - Reducer Function: At the core of useReducer is a reducer function. This function takes the current state
 and an action as arguments and returns the new state based on the action. The reducer function follows the signature (state, action) => newState.

2 - Dispatch Function: Along with the reducer function, useReducer returns a dispatch function.
When you want to update the state, you call this dispatch function with an action. The dispatch function then
calls the reducer function with the current state and the action, and updates the state based on the returned new state.

3 - Initialization: When you use useReducer, you need to provide an initial state and a reducer function.
The initial state represents the initial value of the state, and the reducer function specifies how state transitions should occur based on actions.

4 - Usage: You typically use useReducer when you have complex state logic that involves multiple sub-values or when the next state
depends on the previous state. It's often used in combination with the Context API to manage global state in React applications.

Benefits:

Predictability: By encapsulating state transitions in a reducer function, useReducer promotes predictability and maintainability of state management code.
Complex State: It's well-suited for managing complex state logic where the next state depends on the previous state or where the state involves multiple sub-values.
Optimization: In some cases, useReducer can be more efficient than useState, especially when dealing with deeply nested state or when updates depend on the previous state.
Here's a simple example demonstrating the usage of useReducer: